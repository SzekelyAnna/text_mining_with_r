[["index.html", "Szövegbányászat és mesterséges intelligencia R-ben 1 Bevezetés", " Szövegbányászat és mesterséges intelligencia R-ben Sebk Miklós, Ring Orsolya 1 Bevezetés Jelen kötet a Kvantitatív szövegelemzés és szövegbányászat a politikatudományban (LHarmattan, 2016) cím könyv folytatásaként és egyben kiegészítéseként a szövegbányászat és a mesterséges intelligencia társadalomtudományi alkalmazásának gyakorlatába nyújt bevezetést. A szövegek kvantitatív elemzése (quantitative text analysis  QTA) a nemzetközi társadalomtudomány egyik leggyorsabban fejld irányzata. A szövegek és más minségi adatok (filmek, képek) elemzése annyiban különbözik a mennyiségi (kvantitatív) adatokétól, hogy nyers formájukban még nem alkalmasak arra, hogy statisztikai, illetve ökonometriai elemzés alá vessük ket, s így további módszertani problémákat vetnek fel, melyek speciális tárgyalása szükséges. A tervezett kötetben bemutatott példák többsége a politikatudományhoz kapcsolódik, de más alkalmazási területekre is kitér. Míg az elz kötet az egyes kódolási eljárásokat, illetve ezek kutatás-módszertani elnyeit és hátrányait ismertette, itt a társadalomtudományi elemzésének során használható kvantitatív szövegelemzés legfontosabb gyakorlati feladatait vesszük sorra. A kézirat a magyar tankönyvpiacon az elsnek számít a tekintetben, hogy a társadalomtudományban használatos kvantitatív szövegelemzési eljárásokat részletesen, lépésrl-lépésre ismerteti, kezdve a megfelel korpusz kialakításához szükséges ismeretektl, a különböz szövegbányászati módszerek (szózsák, dokumentum-kifejezés mátrix, a névelem-felismerés, az osztályozás, illetve a csoportosítás feladataira), illetve az egyszerbb szövegösszehasonlítási-feladatok áttekintésén át, egészen a felügyelt és felügyelet nélküli gépi tanulásig, a politikatudományi vizsgálatok során leggyakrabban használatos R programnyelven készült programok segítségével. Az olvasó a két kötet együttes használatával olyan ismeretek birtokába kerül, melyek révén képes lesz alkalmazni a kvantitatív szövegelemzés és szövegbányászat legalapvetbb eljárásait saját kutatására. Deduktív vagy induktív felfedez logikája fényében dönthet az adatelemzés módjáról, és a felkínált menübl kiválaszthatja a kutatási tervéhez legjobban illeszked megoldásokat. A kötetet végigkísér konkrét példák segítségével pedig akár reprodukálhatja is ezen eljárásokat saját kutatásában. Mindezt a kötet függelékében helyet kapó R-scriptek részletes leírása is segíti majd. A kötet két f célcsoportjaként így a társadalomtudományi kutatói és felsoktatási közösséget határozzuk meg, valamint rögzítjük, hogy a kvantitatív szövegelemzés területén belül elsdlegesen a dokumentum- és tartalomelemzési módszertanhoz kapcsolódunk. A könyvben ugyancsak helyet kap a fontosabb fogalmak magyar és angol nyelv szószedete, valamint a további olvasásra ajánlott szakirodalom szerepeltetése. Az oktatásban való közvetlen alkalmazást segíthetik továbbá a fejezetek végén megadott vizsgakérdések, illetve a kötet honlapján (qta.tk.mta.hu) szerepl további információk: gyakorlófeladatok (megoldásokkal), az egyes feladatokra alkalmazható scriptek és kereskedelmi programok bemutatása, a témával kapcsolatos prezentációk és további ajánlott irodalmak. "],["a-kvantitatív-szövegelemzés-és-szövegbányászat-alapfogalmai.html", "2 A kvantitatív szövegelemzés és szövegbányászat alapfogalmai", " 2 A kvantitatív szövegelemzés és szövegbányászat alapfogalmai elso fejezet "],["r-és-rstudio.html", "3 R és RStudio", " 3 R és RStudio masodik fejezet "],["az-adatkezelés-és-vizualizáció-alapjai.html", "4 Az adatkezelés és vizualizáció alapjai 4.1 A pipe operátor 4.2 Egy data frame meghatározott sorainak leválogatása 4.3 Vizualizáció", " 4 Az adatkezelés és vizualizáció alapjai 4.1 A pipe operátor A pipe operátor %&gt;% mindig egy parancs kimenetét veszi fel, és a következ parancs bemenetévé teszi azt, így segítségével tulajdonképpen folyamat láncolatokat (pipeline) képezhetünk. Mivel az R egy funkcionális nyelv, az R-ben írt kódok gyakran sok zárójelet tartalmaznak. Összetett kódok esetén sok zárójelet kellene egymásba ágyazni, ami megnehezítené a kód olvasását és megértését, ekkor segít a pipe operator. Az alábbiakban például azt akarjuk összeszámolni, hogy hány Anna nev lány született, amit megtehetjük zárójelek egymásba ágyazásával: sum(select(filter(babynames,sex == \"F\",name == \"Anna\"),n)) De ugyanezt megkaphatjuk a%&gt;% használatával is: babynames %&gt;% filter(sex == &quot;F&quot;, name == &quot;Anna&quot;) %&gt;% select(n) %&gt;% sum () 4.2 Egy data frame meghatározott sorainak leválogatása A következkben az elz fejezetben megismert data frame meghatározott sorainak leválogatásra láthatunk példát a fentebb bemutatott pipe operátor segítségével. Ehhez az install.packages() paranccsal installáljuk, majd a library()függvény segítségével olvassuk be a következ csomagokat: install.packages(readr) install.packages(tidyr) install.packages(dplyr) install.packages(purrr) install.packages(ggplot2) install.packages(gapminder) library(readr) library(tidyr) library(dplyr) library(purrr) library(ggplot2) library(gapminder) Ezután hozzuk létre a gapminder nev data frame-t: gapminder_df &lt;- gapminder A jobb fels ablak environment fülén láthatjuk, hogy a data frame 1704 megfigyelést, azaz sort és 6 változót, vagyis oszlopot tartalmaz. A sorok leválogatásához a dplyr csomag filter() parancsát használva, a %&gt;% operátor segítségével leválogatjuk azon országok 1962-es adatait, ahol a várható élettartam meghaladta a 70 évet: gapminder_df %&gt;% filter(year == 1962, lifeExp &gt; 70) ## # A tibble: 16 x 6 ## country continent year lifeExp pop gdpPercap ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Australia Oceania 1962 70.9 10794968 12217. ## 2 Belgium Europe 1962 70.2 9218400 10991. ## 3 Canada Americas 1962 71.3 18985849 13462. ## 4 Denmark Europe 1962 72.4 4646899 13583. ## 5 France Europe 1962 70.5 47124000 10560. ## 6 Germany Europe 1962 70.3 73739117 12902. ## 7 Iceland Europe 1962 73.7 182053 10350. ## 8 Ireland Europe 1962 70.3 2830000 6632. ## 9 Netherlands Europe 1962 73.2 11805689 12791. ## 10 New Zealand Oceania 1962 71.2 2488550 13176. ## 11 Norway Europe 1962 73.5 3638919 13450. ## 12 Slovak Republic Europe 1962 70.3 4237384 7481. ## 13 Sweden Europe 1962 73.4 7561588 12329. ## 14 Switzerland Europe 1962 71.3 5666000 20431. ## 15 United Kingdom Europe 1962 70.8 53292000 12477. ## 16 United States Americas 1962 70.2 186538000 16173. De ugyanígy leválogathatjuk a data frame-bl az adatokat egy karakterlánc és egy logikai mvelet alapján. gapminder_df %&gt;% filter(country == &quot;Sweden&quot;, year &gt; 1990) ## # A tibble: 4 x 6 ## country continent year lifeExp pop gdpPercap ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Sweden Europe 1992 78.2 8718867 23880. ## 2 Sweden Europe 1997 79.4 8897619 25267. ## 3 Sweden Europe 2002 80.0 8954175 29342. ## 4 Sweden Europe 2007 80.9 9031088 33860. Itt tehát a data frame azon sorait szeretnénk látni, ahol az ország megegyezik a Sweden\" karakterlánccal az év pedig nagyobb, mint 1990. A select() parancs segítségével leválogathatunk oszlopokat a data frame-bl, a mutate() segítségével pedig új oszlopot adhatunk hozzá: gapminder_df %&gt;% select(country, year, pop) %&gt;% #leválogatjuk a country, year, pop oszlopokat mutate(pop_k = pop/1000) # létrehozzuk a pop_k oszlopot és meghatározzuk, hogy mit tartalmazzon ## # A tibble: 1,704 x 4 ## country year pop pop_k ## &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Afghanistan 1952 8425333 8425. ## 2 Afghanistan 1957 9240934 9241. ## 3 Afghanistan 1962 10267083 10267. ## 4 Afghanistan 1967 11537966 11538. ## 5 Afghanistan 1972 13079460 13079. ## 6 Afghanistan 1977 14880372 14880. ## 7 Afghanistan 1982 12881816 12882. ## 8 Afghanistan 1987 13867957 13868. ## 9 Afghanistan 1992 16317921 16318. ## 10 Afghanistan 1997 22227415 22227. ## # ... with 1,694 more rows 4.3 Vizualizáció Az elemzéseinkhez használt data frame adatainak alapján a ggplot2 csomag segítségével lehetségünk van különböz vizualizációk készítésére is. A ggplot2 használata során különböz témákat alkalmazhatunk, melyek részletes leírása megtalálható: https://ggplot2.tidyverse.org/reference/ggtheme.html Abban az esetben, ha nem választunk témát, a ggplot2 a következ ábrán is látható alaptémát használja. Ha például a szürke helyett fehér hátteret szeretnénk, alkalmazhatjuk a theme_minmal()parancsot. Szintén gyakran alkalmazott ábra alap a thema_bw(), ami az elztl az ábra keretezésében különbözik. Ha fehér alapon, de a beosztások vonalait feketén szeretnénk megjeleníteni, alkalmazhatjuk a theme_linedraw() függvényt, a theme_void() segítségével pedig egy fehér alapon, beosztásoktól mentes alapot kapunk, a theme_dark() pedig sötét hátteret eredményez. A theme_classic() segítségével az x és y tengelyt jeleníthetjük meg fehér alapon. Egy ábra készítésének alapja mindig a használni kívánt adatkészlet beolvasása, illetve az ábrázolni kiíván változtót vagy változók megadása. Ezt követi a megfelel alakzat kiválasztása, attól függen például, hogy eloszlást, változást, adatok közötti kapcsolatot, vagy elétéseket akarunk ábrázolni. A geom az a geometriai objektum, a mit a diagram az adatok megjelenítésére használ. Agglpot2 több mint 40 féle alakzat alkalmazására ad lehetséget, ezek közül néhány gyakoribbat mutatunk be az alábbiakban. Az alakzatokról részletes leírása található például az alábbi linken: https://r4ds.had.co.nz/data-visualisation.html A következkben a már korábban is használt gapminder adatok segítségével, személetetjük az adatok vizualizálásának alapjait. Elször egyszer alapbeállítások mellett egy histogram típusú vizualizációt készítünk. ggplot(data = gapminder_df, #itt adjuk meg az adatkészletet mapping = aes(x = gdpPercap)) + #majd a változót geom_histogram() #és az alakzatot Lehetségünk van arra, hogy az alakzat színét megváltoztatássuk. A használható színek és színkódok megtalálhatóak a ggplot2 leírásában: https://ggplot2-book.org/scale-colour.html ggplot(data = gapminder_df, mapping = aes(x = gdpPercap)) + geom_histogram(fill = &quot;yellow&quot;, colour = &quot;green&quot;) # a fill = után idézjelben adjuk meg az alakzat kitöltésére, a colour = után pedig a körberajzolására használni kívánt színt Meghatározhatjuk külön-külön a histogram x és y tengelyén ábrázolni kívánt adatokat és választhatjuk azok pontszer ábrázolását is. ggplot(data = gapminder_df, mapping = aes(x = gdpPercap, y = lifeExp)) + geom_point() #itt választjuk a pontszer ábrázolást Ahogy az elzekben, itt is megváltoztathatjuk az ábra színét. ggplot(data = gapminder_df, mapping = aes(x = gdpPercap, y = lifeExp)) + geom_point(colour = &quot;blue&quot;) Az fenti script kibvítésével az egyes kontinensek adatait különböz színnel ábrázolhatjuk, az x és y tengelyt elnevezhetjük, a histogramnak címet és alcímet adhatunk, illetve az adataink forrását is feltüntethetjük az alábbi módon: ggplot(data = gapminder_df, mapping = aes(x = gdpPercap, y = lifeExp, color = continent)) + #a kontinensek adataitkülönböz színekkel ábrázolja geom_point() + labs(x = &quot;GDP per capita (log $)&quot;, # a labs()segítségével nevezhetjük el a tengelyeket, adhatunk f és alcímeket az ábrának y = &quot;Life expectancy&quot;, title = &quot;Connection between GDP and Life expectancy&quot;, subtitle = &quot;Points are country-years&quot;, caption = &quot;Source: Gapminder dataset&quot;) Az ábrán található feliratok méretének, bettípusának és betszínének megválasztásra is lehetségünk van. ggplot(data = gapminder_df, mapping = aes(x = gdpPercap, y = lifeExp, color = continent)) + #a kontinensek adataitkülönböz színekkel ábrázolja geom_point() + labs(x = &quot;GDP per capita (log $)&quot;, # a labs()segítségével nevezhetjük el a tengelyeket, adhatunk f és alcímeket az ábrának y = &quot;Life expectancy&quot;, title = &quot;Connection between GDP and Life expectancy&quot;, subtitle = &quot;Points are country-years&quot;, caption = &quot;Source: Gapminder dataset&quot;)+ theme(plot.title = element_text(size = 20, #megadhatjuk a kívánt betmértetet colour = &quot;red&quot;, #megadhatjuk a kívánt betszínt face = &quot;italic&quot;, #beállíthatjuk, hogy a szöveg dlt bets legyen family = &quot;Courier&quot;)) #meggadhatjuk a kívánt bettípust Készíthetünk oszlopdiagramot is, amit a ggplot2 diamonds adatkészletén személtetünk ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) Itt is lehetségünk van arra, hogy a diagram színét megváltoztassuk. ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut), fill = &quot;darkgreen&quot;) De arra is lehetségünk van, hogy az egyes oszlopok eltér színek legyenek. ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = cut)) Arra is van lehetségünk, hogy egyszerre több változót is ábrázoljunk. ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) Arra ggplot2 segítségével arra is lehetségünk van, hogy csv-bl beolvasott adatainkat vizualizáljuk. plot_cap_1 &lt;- read.csv(&quot;plot_cap_1.csv&quot;, head=TRUE, sep=&#39;;&#39;) #beolvassuk a csv fájlt, megadva, hogy az egyes oszlopokat &#39;;&#39; határolja ggplot(plot_cap_1, aes(Year, fill = Subtopic)) + #megadjuk, hogy az adatokat évente és azon belül subtopic-ok szerint szeretnénk rendezni scale_x_discrete(limits=c(1957, 1958, 1959, 1960, 1961, 1962, 1963))+ geom_bar(position = &quot;dodge&quot;) + #meghatározzuk az x tengely értékeit labs(x= NULL, y = NULL, #az x és az y tengely nem kap külön feliratot title = &quot;A Magyar Közlönyben kihirdetett agrárpolitikai jogszabályok&quot;, #az ábra címe subtitle = &quot;N=445&quot;)+ #az ábra alcíme coord_flip()+ #az ábra tipusa theme_minimal()+ theme(plot.title = element_text(size = 12)) #az ábra címének betmérete A csv-bl belolvasott adatainból kördiagramot is készíthetünk pie &lt;- read.csv(&quot;pie.csv&quot;, head=TRUE, sep=&#39;;&#39;) ggplot(pie, aes(x=&quot;&quot;, y=value, fill = Type)) + geom_bar(stat=&quot;identity&quot;, width=1) + coord_polar(&quot;y&quot;, start=0) + scale_fill_brewer(palette=&quot;GnBu&quot;)+ labs(title = &quot;A Magyar Közlönyben megjelent jogszabályok típusai&quot;, subtitle = &quot;N = 445&quot;) + theme_void() "],["leíró-statisztika-szózsák-és-szóeloszlások.html", "5 Leíró statisztika: szózsák és szóeloszlások", " 5 Leíró statisztika: szózsák és szóeloszlások negyedik fejezet "],["a-szövegek-reprezentálása-a-vektortérben.html", "6 A szövegek reprezentálása a vektortérben", " 6 A szövegek reprezentálása a vektortérben otodik fejezet "],["a-korpuszépítés-problémái-és-a-szövegel-készítés.html", "7 A korpuszépítés problémái és a szövegelkészítés", " 7 A korpuszépítés problémái és a szövegelkészítés hatodik fejezet "],["szótáralapú-elemzések-érzelem-elemzés.html", "8 Szótáralapú elemzések, érzelem-elemzés", " 8 Szótáralapú elemzések, érzelem-elemzés hetedik fejezet "],["klaszterelemzés-és-topic-modellezés.html", "9 Klaszterelemzés és topic modellezés", " 9 Klaszterelemzés és topic modellezés nyolcadik fejezet "],["szóbeágyazások.html", "10 Szóbeágyazások", " 10 Szóbeágyazások kilencedik fejezet "],["szövegösszehasonlítás.html", "11 Szövegösszehasonlítás", " 11 Szövegösszehasonlítás tizedik fejezet "],["természetes-nyelv-feldolgozás-nlp.html", "12 Természetes-nyelv feldolgozás (NLP)", " 12 Természetes-nyelv feldolgozás (NLP) tizenegyedik fejezet "],["osztályozás-és-felügyelt-tanulás.html", "13 Osztályozás és felügyelt tanulás", " 13 Osztályozás és felügyelt tanulás tizenkeddik fejezet "],["függelék.html", "14 Függelék", " 14 Függelék Magyar nyelv NLP és nyelvtechnológiai eszközök "]]
